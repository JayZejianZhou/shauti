class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> wordsCount;
        
        for (int i = 0; i < words.size(); i++)
        {
            string s = words[i];
            wordsCount[s] += 1;
        }
        
        priority_queue<pair<string, int>, vector<pair<string, int>>, Compare> pqMin;
        
        for (pair<string, int> element : wordsCount)
        {
	        pqMin.emplace(element);
            if (pqMin.size() > k)
            {
                pqMin.pop();
            }
        }
        
        vector<string> topKresult;
        
        while(pqMin.size() != 0)
        {
            pair<string, int> element = pqMin.top();
            topKresult.push_back(element.first);
            pqMin.pop();
        }
        
        reverse(topKresult.begin(), topKresult.end());
        
        return topKresult;
    }
    
    class Compare
    {
        public:
            bool operator() (pair<string, int> p1, pair<string, int> p2)
            {
                if (p1.second > p2.second)
                {
                    return true;
                }
                else if (p1.second < p2.second)
                {
                    return false;
                }
                else
                {
                    if (p1.first < p2.first)
                        return true;
                    else
                        return false;
                }
            }
    };
};