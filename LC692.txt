class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
    unordered_map<string, int> words_count; // 生成一个
    for(auto it:words){
        if(words_count.find(it)!=words_count.end()){
            words_count[it]=1;
        }
        else{
            words_count[it]++;
            }
    }
        
    //插入排序，也可以不排序，用priority que压入自动排序
    //还不如用proority queue, 自己写了个PQ  
    vector<pair<int, string> ordered_words;
    for(auto it=words_count.begin(); it<=words_count.end(); it++){
        int j=0;
        if(ordered_words.size()==0){
            ordered_words[0].first=*(it).second;
            ordered_words[0].second=(*it).first
        }
        int j=0;
        while((*it).second<ordered_words[j].first){
            j++;
        }
        if((*it).second==ordered_words[j].first){//相同频率
            if((*it).first>ordered_words[j].second){
                ordered_words.insert(ordered_words.begin()+j+1, {(*it).second, (*it).first});
            }
            else{
                ordered_words.insert(ordered_words.begin()+j, {(*it).second, (*it).first});
            }
        }       


    }
            // 返回前k个
    vector<string> res;
    for(int i=1;i<k;i++){
        res.push_back(*(ordered_words.end()));
        ordered_words.pop_back();
    }
    return res;
    
        
};